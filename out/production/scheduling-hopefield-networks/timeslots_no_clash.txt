public String findGoodPatterns(Autoassociator autoassociator){ // finds the timeslots which have 0 clashes and many courses and trains
		System.out.println("Good cases that autoassociator is trained on");
		System.out.println("Slot Courses Clashes");
		String str = "";
		for (int j = 0; j < period; j++) {
			int coursesInSlot = 0;
			int clashesInSlot = 0;
			for (int k = 1; k < elements.length; k++) {
				if (elements[k].mySlot == j) {
					coursesInSlot++;
					clashesInSlot += elements[k].clashSize();
				}
			}

			if (clashesInSlot == 0 && coursesInSlot >= (elements.length - 1) / autoassociator.getTrainingCapacity() / 2) {
				System.out.println(j + "\t" + coursesInSlot + "\t" + clashesInSlot);
				str+=j + "\t" + coursesInSlot + "\t" + clashesInSlot+"\n";
				//				System.out.println("Timeslot " + j + ": " + Arrays.toString(timeslot));
				int[] timeslot = this.getTimeSlot(j);
				autoassociator.training(timeslot);
			}
		}
		return str;
	}


Shift = 15
0	5	0
1	6	0
2	3	0
3	4	0
4	8	0
5	4	0
8	4	0
9	3	0
10	6	0
12	5	0
13	4	0
14	4	0
15	4	0
16	5	0


Shift = 17
1	8	0
2	6	0
3	8	0
4	4	0
5	10	0
6	5	0
7	6	0
8	4	0
9	4	0
10	4	0
12	3	0
14	3	0
15	4	0


Shift = 15
0	6	0
2	4	0
3	4	0
4	4	0
6	5	0
7	5	0
8	5	0
11	3	0
12	5	0
13	3	0
15	6	0


Shift = 15
0	5	0
2	5	0
3	3	0
4	4	0
5	3	0
6	4	0
8	4	0
9	5	0
10	4	0
12	5	0
14	5	0


Shift = 17


Shift = 17
1	8	0
2	6	0
3	8	0
4	4	0
5	10	0
6	5	0
7	6	0
8	4	0
9	4	0
10	4	0
12	3	0
14	3	0
15	4	0


Shift = 15
0	7	0
3	3	0
6	3	0
7	3	0
10	5	0
12	4	0
13	5	0
15	6	0
16	3	0


Shift = 15
3	5	0
4	4	0
5	4	0
8	4	0
10	7	0
12	4	0
14	5	0


Shift = 15
2	4	0
4	4	0
5	4	0
8	3	0
9	3	0
10	5	0
12	5	0
13	5	0


Shift = 15
0	5	0
2	3	0
4	4	0
6	4	0
7	3	0
8	5	0
10	5	0
11	5	0
12	6	0
13	5	0
15	3	0
16	6	0


Shift = 15
1	7	0
3	5	0
4	4	0
5	4	0
6	5	0
7	4	0
8	4	0
9	5	0
11	4	0
12	3	0
13	7	0
15	4	0


Shift = 15
1	7	0
3	5	0
4	4	0
5	4	0
6	5	0
7	4	0
8	4	0
9	5	0
11	4	0
12	3	0
13	7	0
15	4	0


Shift = 15
1	5	0
5	6	0
7	5	0
9	6	0
11	5	0
12	4	0
13	3	0


Shift = 17
1	5	0
5	6	0
7	5	0
9	6	0
11	5	0
12	4	0
13	3	0


